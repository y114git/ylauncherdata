# =============================================================================
#                           YLAUNCHER
#             –í–µ—Ä—Å–∏—è 1.2 - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# =============================================================================
import customtkinter as ctk
import tkinter.filedialog
import tkinter.messagebox
import os
import sys
import platform
import requests
import zipfile
import shutil
import subprocess
import psutil
import threading
import json
import re
from io import BytesIO
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from base64 import urlsafe_b64encode, urlsafe_b64decode
from typing import Optional, Dict, List, Tuple, Any

# --- –ì–õ–ê–í–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# !!! –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï, –ï–°–õ–ò –ù–£–ñ–ù–û !!!
GITHUB_REPO = "y114git/ylauncherdata" # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–µ—Ä–µ–≤–æ–¥–∞–º–∏)
ZIP_PASSWORD = b"P5iy%jsAwd3mtGi4Y*G#" # –ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
CACHE_ENCRYPTION_KEY = b"@2nuD6xqNA&X$4kS*hbs" # –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

class YLauncherApp(ctk.CTk):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-–ª–∞—É–Ω—á–µ—Ä–∞ YLAUNCHER."""
    def __init__(self):
        super().__init__()
        self.title("YLAUNCHER –¥–ª—è Deltarune")
        self.geometry("600x450")
        self.resizable(False, False)
        ctk.set_appearance_mode("dark")
        self.protocol("WM_DELETE_WINDOW", self._on_closing)

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ ---
        self.app_is_closing = False
        self.game_path: str = ""
        self.cache_path: str = self._get_app_support_path()
        self.config_path: str = os.path.join(self.cache_path, "config.json")
        self.versions_path: str = os.path.join(self.cache_path, "local_versions.json")
        self.local_config: Dict[str, Any] = {}
        self.local_versions: Dict[str, Any] = {}
        self.translations_by_chapter: Dict[int, List[Tuple]] = {i: [] for i in range(5)}
        self.fernet: Optional[Fernet] = self._init_encryption(CACHE_ENCRYPTION_KEY)

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ (–æ–±—ä—è–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ Optional) ---
        self.vanilla_mode_var: Optional[ctk.BooleanVar] = None
        self.vanilla_mode_checkbox: Optional[ctk.CTkCheckBox] = None
        self.change_path_button: Optional[ctk.CTkButton] = None
        self.tab_view: Optional[ctk.CTkTabview] = None
        self.tabs: Dict[int, Dict[str, Any]] = {}
        self.status_label: Optional[ctk.CTkLabel] = None
        self.progress_bar: Optional[ctk.CTkProgressBar] = None
        self.action_button: Optional[ctk.CTkButton] = None
        self.delete_button: Optional[ctk.CTkButton] = None

        self._create_widgets()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        self.after(100, lambda: threading.Thread(target=self.initialize_launcher, daemon=True).start())

    def _init_encryption(self, password: bytes) -> Optional[Fernet]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–æ–ª—è."""
        try:
            salt = b'salt_for_ylauncher_!@#$'
            kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=salt, iterations=480000)
            key = urlsafe_b64encode(kdf.derive(password))
            return Fernet(key)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.after(0, lambda: self._update_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "red"))
            return None

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        top_frame = ctk.CTkFrame(self)
        top_frame.pack(fill="x", padx=10, pady=10)

        self.vanilla_mode_var = ctk.BooleanVar()
        self.vanilla_mode_checkbox = ctk.CTkCheckBox(
            top_frame, text="–ò–≥—Ä–∞—Ç—å –±–µ–∑ –º–æ–¥–æ–≤",
            variable=self.vanilla_mode_var, command=self._toggle_vanilla_mode
        )
        self.vanilla_mode_checkbox.pack(side="left", padx=(10, 5), pady=10)

        self.change_path_button = ctk.CTkButton(
            top_frame, text="–°–º–µ–Ω–∏—Ç—å –ø–∞–ø–∫—É –∏–≥—Ä—ã",
            command=lambda: threading.Thread(target=self._prompt_for_game_path, daemon=True).start()
        )
        self.change_path_button.pack(side="right", padx=(5, 10), pady=10)

        self.tab_view = ctk.CTkTabview(self, anchor="w", command=lambda: self._update_ui_for_selection())
        self.tab_view.pack(expand=True, fill="both", padx=10, pady=0)
        self.tabs = {}
        for i, name in enumerate(["–ì–ª. –º–µ–Ω—é", "–ì–ª–∞–≤–∞ 1", "–ì–ª–∞–≤–∞ 2", "–ì–ª–∞–≤–∞ 3 & 4", "–ì–ª–∞–≤–∞ 5"]):
            tab = self.tab_view.add(name)
            label = ctk.CTkLabel(tab, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")
            label.pack(pady=(20, 5))
            menu = ctk.CTkOptionMenu(tab, values=["–ó–∞–≥—Ä—É–∑–∫–∞..."], command=lambda _, c_id=i: self._update_ui_for_selection(c_id))
            menu.pack()
            self.tabs[i] = {"menu": menu, "label": label}
        self.tab_view.set("–ì–ª–∞–≤–∞ 1") # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        bottom_frame = ctk.CTkFrame(self)
        bottom_frame.pack(fill="x", side="bottom", padx=10, pady=(5, 10))
        self.status_label = ctk.CTkLabel(bottom_frame, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", text_color="gray")
        self.status_label.pack(pady=5)
        self.progress_bar = ctk.CTkProgressBar(bottom_frame)
        self.progress_bar.set(0)

        action_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
        action_frame.pack(fill="x", expand=True)
        self.action_button = ctk.CTkButton(
            action_frame, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ...", state="disabled",
            command=self._on_action_button_click
        )
        self.action_button.pack(side="left", expand=True, padx=(10, 5), pady=5, ipady=5)
        self.delete_button = ctk.CTkButton(
            action_frame, text="üóëÔ∏è", width=40, state="disabled",
            command=self._on_delete_button_click
        )
        self.delete_button.pack(side="right", padx=(5, 10), pady=5, ipady=5)

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

    def initialize_launcher(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self._is_game_running():
            self._update_status("–û—à–∏–±–∫–∞: Deltarune —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", "red")
            if self.action_button:
                self.action_button.configure(state="disabled")
            return

        self._load_local_config()
        if not self._find_and_validate_game_path():
            return

        self._update_status("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å GitHub...", "gray")
        if self._fetch_translations_from_github():
            self._populate_ui_with_translations()
            self.after(0, self._update_ui_for_selection)
        else:
            self._update_status("–ù–µ—Ç —Å–µ—Ç–∏. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º.", "orange")
            if self.vanilla_mode_checkbox:
                self.vanilla_mode_checkbox.select()
            self._toggle_vanilla_mode()
            if not self.local_versions:
                 self._update_status("–ù–µ—Ç —Å–µ—Ç–∏ –∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.", "red")
                 if self.action_button:
                     self.action_button.configure(state="disabled")

    def _on_action_button_click(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ç–æ–∫–µ."""
        if self.vanilla_mode_var and self.vanilla_mode_var.get():
            threading.Thread(target=self._launch_vanilla, daemon=True).start()
        else:
            if self.action_button: self.action_button.configure(state="disabled")
            if self.delete_button: self.delete_button.configure(state="disabled")
            if self.progress_bar:
                self.progress_bar.pack(fill="x", padx=10, pady=(0, 5))
                self.progress_bar.set(0)
            threading.Thread(target=self._handle_modded_action, daemon=True).start()

    def _handle_modded_action(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (—É—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–∑–∞–ø—É—Å–∫) –≤—ã–ø–æ–ª–Ω–∏—Ç—å."""
        if not self.action_button: return
        status = self.action_button.cget("text")
        if status in ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–û–±–Ω–æ–≤–∏—Ç—å"]:
            self._install_translation()
        elif status == "–ó–∞–ø—É—Å—Ç–∏—Ç—å":
            self._launch_modded()

        self.after(0, self._update_ui_for_selection)
        if self.progress_bar:
            self.after(0, self.progress_bar.pack_forget)

    # --- –ü–æ–¥-–ø—Ä–æ—Ü–µ—Å—Å—ã (–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–∞—Ö) ---

    def _install_translation(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥."""
        selected_info = self._get_selected_mod_info()
        if not selected_info: return

        chapter_id, full_id, name, version, url, _ = selected_info

        try:
            self._update_status(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {name} v{version}...", "yellow")
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()
            zip_content = BytesIO()
            total_size = int(response.headers.get('content-length', 0))
            downloaded_size = 0
            for data in response.iter_content(chunk_size=8192):
                zip_content.write(data)
                downloaded_size += len(data)
                if total_size > 0:
                    progress = 0.1 + (downloaded_size / total_size) * 0.4
                    self.after(0, lambda p=progress: self.progress_bar.set(p) if self.progress_bar else None) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ lambda

            self._update_status("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...", "yellow")
            self.after(0, lambda: self.progress_bar.set(0.6) if self.progress_bar else None)
            zip_content.seek(0)
            extracted_files = {}
            with zipfile.ZipFile(zip_content, 'r') as zip_ref:
                for file_info in zip_ref.infolist():
                    if not file_info.is_dir():
                        extracted_files[file_info.filename] = zip_ref.read(file_info.filename, pwd=ZIP_PASSWORD)

            if not self.fernet: raise ValueError("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (Fernet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")
            self._update_status("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à...", "yellow")
            self.after(0, lambda: self.progress_bar.set(0.8) if self.progress_bar else None)
            serializable_files = {path: urlsafe_b64encode(content).decode('ascii') for path, content in extracted_files.items()}
            encrypted_data = self.fernet.encrypt(json.dumps(serializable_files).encode('utf-8'))
            with open(os.path.join(self.cache_path, f"{full_id}.encrypted"), 'wb') as f:
                f.write(encrypted_data)

            self.local_versions[full_id] = {"version": version, "name": name}
            self._write_json(self.versions_path, self.local_versions)
            self._update_status(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} v{version} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "green")

        except Exception as e:
            self._update_status(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "red")
        finally:
            self.after(0, lambda: self.progress_bar.pack_forget() if self.progress_bar else None)
            self.after(0, lambda c_id=chapter_id: self._update_ui_for_selection(c_id))


    def _launch_modded(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –∑–∞—â–∏—Ç–æ–π –∏ –ø–æ–¥–º–µ–Ω–æ–π —Ñ–∞–π–ª–æ–≤."""
        selected_info = self._get_selected_mod_info()
        if not selected_info: return
        chapter_id, full_id, name, _, _, is_protected = selected_info

        target_dir = self._get_target_dir()
        if not target_dir: return

        backup_dir = os.path.join(self.cache_path, "backup", str(chapter_id))

        try:
            self._update_status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...", "yellow")
            self.after(0, lambda: self.progress_bar.set(0.1) if self.progress_bar else None)

            if not self.fernet: raise ValueError("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (Fernet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)")
            cache_file = os.path.join(self.cache_path, f"{full_id}.encrypted")
            with open(cache_file, 'rb') as f:
                decrypted_data = self.fernet.decrypt(f.read())
            serializable_files = json.loads(decrypted_data)
            decrypted_files = {path: urlsafe_b64decode(content) for path, content in serializable_files.items()}

            if is_protected:
                self._update_status("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...", "yellow")
                self.after(0, lambda: self.progress_bar.set(0.3) if self.progress_bar else None)
                if os.path.exists(backup_dir): shutil.rmtree(backup_dir)
                os.makedirs(backup_dir)
                for rel_path in decrypted_files.keys():
                    game_file_path = os.path.join(target_dir, rel_path.replace('/', os.sep))
                    if os.path.exists(game_file_path):
                        backup_file_path = os.path.join(backup_dir, rel_path.replace('/', os.sep))
                        os.makedirs(os.path.dirname(backup_file_path), exist_ok=True)
                        shutil.copy2(game_file_path, backup_file_path)

            self._update_status(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{name}'...", "yellow")
            self.after(0, lambda: self.progress_bar.set(0.6) if self.progress_bar else None)
            for rel_path, content in decrypted_files.items():
                game_file_path = os.path.join(target_dir, rel_path.replace('/', os.sep))
                os.makedirs(os.path.dirname(game_file_path), exist_ok=True)
                if platform.system() == "Darwin" and os.path.basename(game_file_path) == "data.win":
                     game_file_path = os.path.join(os.path.dirname(game_file_path), "game.ios")
                with open(game_file_path, "wb") as f: f.write(content)

            self._update_status("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã... –õ–∞—É–Ω—á–µ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ.", "green")
            self.after(0, lambda: self.progress_bar.set(1.0) if self.progress_bar else None)

            exe_path = self.game_path

            self.after(100, self.withdraw)
            game_process = subprocess.Popen([exe_path], cwd=os.path.dirname(exe_path))
            game_process.wait()

        except Exception as e:
            self._update_status(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", "red")
        finally:
            if is_protected and os.path.exists(backup_dir):
                print("–ò–≥—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
                for root, _, files in os.walk(backup_dir):
                    for file in files:
                        backup_file = os.path.join(root, file)
                        original_rel_path = os.path.relpath(backup_file, backup_dir)
                        original_abs_path = os.path.join(target_dir, original_rel_path)
                        os.makedirs(os.path.dirname(original_abs_path), exist_ok=True)
                        shutil.copy2(backup_file, original_abs_path)
                shutil.rmtree(backup_dir)
                print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            self.after(100, self.destroy)

    def _launch_vanilla(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –±–µ–∑ –º–æ–¥–æ–≤."""
        self._update_status("–ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏...", "green")
        exe_path = self.game_path
        try:
            subprocess.Popen([exe_path], cwd=os.path.dirname(exe_path))
            self.after(100, self.destroy)
        except Exception as e:
            self._update_status(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", "red")

    # --- –§—É–Ω–∫—Ü–∏–∏ UI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

    def _update_status(self, message: str, color: str = "white"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ UI (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)."""
        def update():
            if self.status_label:
                self.status_label.configure(text=message, text_color=color)
        if not self.app_is_closing:
            self.after(0, update)

    def _toggle_vanilla_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º "–±–µ–∑ –º–æ–¥–æ–≤"."""
        if not self.vanilla_mode_var or not self.tab_view or not self.delete_button or not self.action_button:
            return

        is_vanilla = self.vanilla_mode_var.get()
        new_state = "disabled" if is_vanilla else "normal"
        self.tab_view.configure(state=new_state)
        self.delete_button.configure(state=new_state if not is_vanilla else "disabled")

        if is_vanilla:
            self.action_button.configure(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ –º–æ–¥–æ–≤)", state="normal")
            self._update_status("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∏–≥—Ä—ã –±–µ–∑ –º–æ–¥–æ–≤.", "gray")
        else:
            self._update_ui_for_selection()

    def _update_ui_for_selection(self, chapter_id: Optional[int] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        if not self.tab_view or not self.action_button or not self.delete_button:
            return
        if self.vanilla_mode_var and self.vanilla_mode_var.get(): return

        current_tab_name = self.tab_view.get()
        if current_tab_name is None: return

        if chapter_id is None:
            try:
                chapter_id = self.tab_view.index(current_tab_name)
            except tkinter.TclError:
                return

        selected_info = self._get_selected_mod_info(chapter_id)

        self.action_button.configure(state="normal" if selected_info else "disabled")

        if not selected_info:
            self.action_button.configure(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥")
            self.delete_button.configure(state="disabled")
            self._update_status("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", "gray")
            return

        _, full_id, name, version, _, _ = selected_info
        self.local_config["last_selected"][str(chapter_id)] = f"{name}_{version}"
        self._write_local_config()

        is_installed = full_id in self.local_versions
        local_version = self.local_versions.get(full_id, {}).get("version", "0.0.0")

        self.delete_button.configure(state="normal" if is_installed else "disabled")

        if not is_installed:
            self.action_button.configure(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self._update_status(f"–ì–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {name} v{version}", "white")
        elif version != local_version:
            self.action_button.configure(text="–û–±–Ω–æ–≤–∏—Ç—å")
            self._update_status(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è '{name}' –¥–æ v{version}", "green")
        else:
            self.action_button.configure(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å")
            self._update_status(f"–ü–µ—Ä–µ–≤–æ–¥ '{name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.", "lightgreen")

    def _on_delete_button_click(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        selected_info = self._get_selected_mod_info()
        if not selected_info: return

        _, full_id, name, _, _, _ = selected_info
        if full_id not in self.local_versions: return

        if tkinter.messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—ç—à –ø–µ—Ä–µ–≤–æ–¥–∞ '{name}'?"):
            cache_file = os.path.join(self.cache_path, f"{full_id}.encrypted")
            if os.path.exists(cache_file):
                os.remove(cache_file)
            if full_id in self.local_versions:
                del self.local_versions[full_id]
                self._write_json(self.versions_path, self.local_versions)

            self._update_status(f"–ü–µ—Ä–µ–≤–æ–¥ '{name}' —É–¥–∞–ª–µ–Ω.", "gray")
            self._update_ui_for_selection()

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

    def _on_closing(self):
        self.app_is_closing = True
        self.destroy()

    def _get_app_support_path(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°."""
        system = platform.system()
        path = ""
        if system == "Windows":
            appdata = os.getenv('APPDATA')
            if appdata:
                path = os.path.join(appdata, "YLauncher")
            else: # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ APPDATA –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
                path = os.path.join(os.path.expanduser('~'), ".YLauncher")
        elif system == "Darwin": # macOS
            path = os.path.join(os.path.expanduser('~'), "Library/Application Support/YLauncher")
        else: # Linux
            path = os.path.join(os.path.expanduser('~'), ".local/share/YLauncher")

        os.makedirs(os.path.join(path, "cache", "backup"), exist_ok=True)
        return os.path.join(path, "cache")

    def _load_local_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏."""
        self.local_config = self._read_json(self.config_path) or {"game_path": "", "last_selected": {}}
        self.local_versions = self._read_json(self.versions_path) or {}
        self.game_path = self.local_config.get("game_path", "")

    def _write_local_config(self):
        self._write_json(self.config_path, self.local_config)

    def _read_json(self, path: str) -> Dict:
        try:
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _write_json(self, path: str, data: Dict):
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def _is_game_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã."""
        names = ["DELTARUNE.exe", "DELTARUNE", "runner"]
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] in names:
                return True
        return False

    def _get_selected_mod_info(self, chapter_id: Optional[int] = None) -> Optional[Tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤ –º–µ–Ω—é –º–æ–¥–µ."""
        if not self.tab_view: return None
        try:
            if chapter_id is None:
                 chapter_id = self.tab_view.index(self.tab_view.get())
        except (tkinter.TclError, IndexError):
            return None

        if chapter_id not in self.tabs: return None

        selected_display_name = self.tabs[chapter_id]["menu"].get()

        for mod_data in self.translations_by_chapter.get(chapter_id, []):
            name, version = mod_data[2], mod_data[3]
            if f"{name}_{version}" == selected_display_name:
                full_id = f"{mod_data[0]}{'p' if mod_data[1] else ''}_{name.replace(' ', '_')}_{version}_{mod_data[4]}"
                return chapter_id, full_id, name, version, mod_data[5], mod_data[1]
        return None

    def _parse_asset_name(self, filename: str) -> Optional[Tuple]:
        """–ü–∞—Ä—Å–∏—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∞—Å—Å–µ—Ç–∞ –∏–∑ —Ä–µ–ª–∏–∑–∞ GitHub."""
        match = re.match(r"(\d)(p?)_([^_]+)_(\d+\.\d+\.\d+)_(\d+)\.zip", filename)
        if not match: return None
        groups = match.groups()
        return (int(groups[0]), bool(groups[1]), groups[2].replace("_", " "), groups[3], int(groups[4]))

    def _fetch_translations_from_github(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ GitHub."""
        api_url = f"https://api.github.com/repos/{GITHUB_REPO}/releases"
        try:
            response = requests.get(api_url, timeout=10)
            response.raise_for_status()
            releases = response.json()

            for i in range(5): self.translations_by_chapter[i] = []

            for release in releases:
                for asset in release.get("assets", []):
                    parsed_info = self._parse_asset_name(asset['name'])
                    if parsed_info:
                        chapter, protected, name, version, priority = parsed_info
                        url = asset['browser_download_url']
                        if 0 <= chapter < 5:
                            self.translations_by_chapter[chapter].append((chapter, protected, name, version, priority, url))

            for chapter in self.translations_by_chapter:
                self.translations_by_chapter[chapter].sort(key=lambda x: (x[4], x[2], x[3]), reverse=True)
            return True
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–ª–∏–∑–æ–≤: {e}")
            return False

    def _populate_ui_with_translations(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏."""
        last_selected_map = self.local_config.get("last_selected", {})

        for chapter_id, translations in self.translations_by_chapter.items():
            if chapter_id not in self.tabs: continue
            menu = self.tabs[chapter_id]["menu"]
            if not translations:
                menu.configure(values=["–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤"], state="disabled")
                menu.set("–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            else:
                display_names = [f"{t[2]}_{t[3]}" for t in translations]
                menu.configure(values=display_names, state="normal")
                last_selected = last_selected_map.get(str(chapter_id))
                if last_selected in display_names:
                    menu.set(last_selected)
                else:
                    menu.set(display_names[0])
        self.after(0, self._update_ui_for_selection)

    def _get_target_dir(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–≥—Ä—ã."""
        if not self.game_path: return None
        if platform.system() == "Darwin": # macOS
             return os.path.join(os.path.dirname(self.game_path), "Resources")
        else:
             return os.path.dirname(self.game_path)

    def _is_valid_game_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—É—Ç–µ–º –∫ –∏–≥—Ä–µ."""
        if not path: return False

        check_path = path
        # –ù–∞ macOS .app —ç—Ç–æ –ø–∞–ø–∫–∞, —Ç–∞–∫ —á—Ç–æ path —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if platform.system() in ["Windows", "Linux"] and os.path.isfile(path):
            check_path = os.path.dirname(path)

        if not os.path.isdir(check_path): return False

        if platform.system() == "Windows":
            exe = os.path.join(check_path, "DELTARUNE.exe")
            if os.path.exists(exe) and os.path.exists(os.path.join(check_path, "data.win")):
                self.game_path = exe
                return True
        elif platform.system() == "Linux":
            exe = os.path.join(check_path, "DELTARUNE")
            if os.path.exists(exe) and os.path.exists(os.path.join(check_path, "data.win")):
                self.game_path = exe
                return True
        elif platform.system() == "Darwin":
            if check_path.endswith(".app"):
                runner = os.path.join(check_path, "Contents/MacOS/runner")
                resources = os.path.join(check_path, "Contents/Resources/game.ios")
                if os.path.exists(runner) and os.path.exists(resources):
                     self.game_path = runner
                     return True
        return False

    def _find_and_validate_game_path(self) -> bool:
        """–ò—â–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –∏–≥—Ä–µ."""
        if self._is_valid_game_path(self.game_path):
            self._update_status(f"–ü—É—Ç—å –∫ –∏–≥—Ä–µ –Ω–∞–π–¥–µ–Ω: {os.path.dirname(self.game_path)}", "gray")
            return True

        self._update_status("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–≥—Ä–æ–π...", "gray")
        autodetected_path = self._autodetect_game_path()
        if self._is_valid_game_path(autodetected_path or ""):
            self.local_config['game_path'] = self.game_path
            self._write_local_config()
            self._update_status(f"–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: {os.path.dirname(self.game_path)}", "green")
            return True

        return self._prompt_for_game_path(is_initial=True)

    def _prompt_for_game_path(self, is_initial: bool = False) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ."""
        if is_initial:
            self._update_status("–ü–∞–ø–∫–∞ —Å –∏–≥—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–∫–∞–∂–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.", "orange")
            tkinter.messagebox.showwarning("–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ DELTARUNE. –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π (–≥–¥–µ DELTARUNE.exe) –∏–ª–∏ —Ñ–∞–π–ª DELTARUNE.app –Ω–∞ macOS.")

        title = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π (–≥–¥–µ DELTARUNE.exe) –∏–ª–∏ —Ñ–∞–π–ª DELTARUNE.app"
        path = ""
        if platform.system() == "Darwin":
            path = tkinter.filedialog.askdirectory(title=title, initialdir=os.path.expanduser("~") + "/Applications")
            if path and not path.endswith(".app"):
                path += ".app" # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É, –∞ –Ω–µ —Å–∞–º –ø–∞–∫–µ—Ç
        else:
            path = tkinter.filedialog.askdirectory(title=title)

        if path and self._is_valid_game_path(path):
            self.local_config['game_path'] = self.game_path
            self._write_local_config()
            self._update_status(f"–ü—É—Ç—å –∫ –∏–≥—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {os.path.dirname(self.game_path)}", "green")
            if is_initial and not self.app_is_closing:
                self.after(10, lambda: threading.Thread(target=self.initialize_launcher, daemon=True).start())
            return True
        elif path:
            self._update_status("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "red")
            tkinter.messagebox.showerror("–û—à–∏–±–∫–∞", "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π DELTARUNE.")

        if is_initial and not self.app_is_closing:
             self.after(100, self.destroy)
        return False

    def _autodetect_game_path(self) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–≥—Ä—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö Steam."""
        system = platform.system()
        paths_to_check = []
        if system == "Windows":
            for env_var in ["ProgramFiles(x86)", "ProgramFiles"]:
                root = os.getenv(env_var)
                if root:
                    paths_to_check.append(os.path.join(root, "Steam/steamapps/common/DELTARUNE"))
        elif system == "Linux":
            paths_to_check.append(os.path.expanduser("~/.steam/steam/steamapps/common/DELTARUNE"))
            paths_to_check.append(os.path.expanduser("~/.local/share/Steam/steamapps/common/DELTARUNE"))
        elif system == "Darwin":
            paths_to_check.append(os.path.expanduser("~/Library/Application Support/Steam/steamapps/common/DELTARUNE/DELTARUNE.app"))

        for path in paths_to_check:
            if os.path.exists(path):
                return path
        return None

if __name__ == "__main__":
    if sys.platform == "win32":
        import ctypes
        myappid = 'y114.ylauncher.1'
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

    app = YLauncherApp()
    app.mainloop()